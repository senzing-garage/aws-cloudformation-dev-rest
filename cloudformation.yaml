AWSTemplateFormatVersion: 2010-09-09

# File format follows https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-anatomy.html
# Tests:
#     Lint: https://github.com/aws-cloudformation/cfn-python-lint
#     Nag: https://github.com/stelligent/cfn_nag
#     aws cloudformation validate-template: https://awscli.amazonaws.com/v2/documentation/api/latest/reference/cloudformation/validate-template.html

Description: >-
  Senzing aws-cloudformation-dev-rest: 0.0.6
  For more information see
  https://github.com/Senzing/aws-cloudformation-dev-rest

# -----------------------------------------------------------------------------
# Metadata
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html
# -----------------------------------------------------------------------------

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Senzing installation
        Parameters:
          - AcceptEula
          - SenzingVersion
          - SenzingLicenseAsBase64
      - Label:
          default: Identify existing database stack
        Parameters:
          - DatabaseStack
      - Label:
          default: Security
        Parameters:
          - CidrInbound
      - Label:
          default: Security responsibility
        Parameters:
          - SecurityResponsibility
    ParameterLabels:
      AcceptEula:
        default: >-
          Required: If you accept the Senzing End User License Agreement at
          https://senzing.com/end-user-license-agreement,
          enter 'I_ACCEPT_THE_SENZING_EULA'.
      CidrInbound:
        default: "Required: Provide the permitted IP address block allowed to connect using CIDR notation."
      DatabaseStack:
        default: "Required: Provide the name of stack containing the Senzing database(s)."
      SecurityResponsibility:
        default: >-
          Required: A default deployment of this template is for demonstration only.
          Before using authentic PII, ensure the security of your deployment.
          The security of this deployment is your responsibility.
          To acknowledge your understanding and acceptance of the foregoing, type “I AGREE”.
      SenzingLicenseAsBase64:
        default: >-
          The Senzing Evaluation comes with 100k free records of entity resolution.
          If using more than 100k records, please input base-64 encoded license string.
      SenzingVersion:
        default: "Required: Version of Senzing to install."

# -----------------------------------------------------------------------------
# Parameters
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/parameters-section-structure.html
# -----------------------------------------------------------------------------

Parameters:
  # AWS Console: https://console.aws.amazon.com/cloudformation/home?#/stacks > {stack} > Parameters

  AcceptEula:
    AllowedPattern: ".+|^I_ACCEPT_THE_SENZING_EULA$"
    ConstraintDescription: AcceptEula parameter must be 'I_ACCEPT_THE_SENZING_EULA'
    Default: "_"
    Description: "Help: https://hub.senzing.com/aws-cloudformation-dev-rest/details#accepteula"
    Type: String

  CidrInbound:
    AllowedPattern: '(?:\d{1,3}\.){3}\d{1,3}(?:/\d\d?)?'
    ConstraintDescription: Inbound CIDR must be in the format n.n.n.n/n
    MinLength: 9
    MaxLength: 18
    Default: "10.0.0.0/32"
    Description: "Help: https://hub.senzing.com/aws-cloudformation-dev-rest/details#cidrinbound"
    Type: String

  DatabaseStack:
    Default: "_"
    Description: "Help: https://hub.senzing.com/aws-cloudformation-dev-rest/details#databasestack"
    Type: String

  SecurityResponsibility:
    AllowedPattern: ".+|^I AGREE$"
    ConstraintDescription: SecurityResponsibility parameter must be 'I AGREE'
    Default: "_"
    Description: "Help: https://hub.senzing.com/aws-cloudformation-dev-rest/details#securityresponsibility"
    Type: String

  SenzingLicenseAsBase64:
    ConstraintDescription: "Must contain only Base64 characters. see https://hub.senzing.com/aws-cloudformation-dev-rest/details#senzinglicenseasbase64"
    Default: " "
    Description: "Help: https://hub.senzing.com/aws-cloudformation-dev-rest/details#senzinglicenseasbase64"
    Type: String

  SenzingVersion:
    AllowedValues:
      - "3.2.0"
      - "3.3.1"
      - "3.3.2"
    Default: "3.3.2"
    Description: "Help: https://hub.senzing.com/aws-cloudformation-ecs-senzing-stack-basic/#senzingversion"
    Type: String

# -----------------------------------------------------------------------------
# Rules
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/rules-section-structure.html
# -----------------------------------------------------------------------------

Rules:
  ConfirmCidrInbound:
    Assertions:
      - Assert: !Not
          - !Equals
            - !Ref CidrInbound
            - "10.0.0.0/32"
        AssertDescription: "Inbound CIDR must be in the format n.n.n.n/n"

  ConfirmDatabaseStack:
    Assertions:
      - Assert: !Not
          - !Equals
            - !Ref DatabaseStack
            - "_"
        AssertDescription: "Entering existing Senzing database stack identifier is required to proceed"

  ConfirmEula:
    Assertions:
      - Assert: !Not
          - !Equals
            - !Ref AcceptEula
            - ""
        AssertDescription: 'EULA needs to be accepted.  Enter "I_ACCEPT_THE_SENZING_EULA"'
      - Assert: !Equals
          - !Ref AcceptEula
          - I_ACCEPT_THE_SENZING_EULA
        AssertDescription: 'EULA acceptance incorrect.  Enter "I_ACCEPT_THE_SENZING_EULA"'

  ConfirmSecurityResponsibility:
    Assertions:
      - Assert: !Equals
          - !Ref SecurityResponsibility
          - "I AGREE"
        AssertDescription: 'Understanding responsibility and entering "I AGREE" is required to proceed.'

# -----------------------------------------------------------------------------
# Mappings
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/mappings-section-structure.html
# -----------------------------------------------------------------------------

Mappings:
  SenzingVersionMap:
    "3.2.0":
      ApiServer: public.ecr.aws/senzing/senzing-poc-server:3.2.2
      KeystoreGenerator: senzing/keystore-generator:latest
    "3.3.1":
      ApiServer: public.ecr.aws/senzing/senzing-poc-server:3.3.2
      KeystoreGenerator: senzing/keystore-generator:latest
    "3.3.2":
      ApiServer: public.ecr.aws/senzing/senzing-poc-server:3.3.3
      KeystoreGenerator: senzing/keystore-generator:latest
  Constants:
    Run:
      ApiServer: Yes
    Stack:
      Name: dev-rest

# -----------------------------------------------------------------------------
# Conditions
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/conditions-section-structure.html
# -----------------------------------------------------------------------------

Conditions:
  IfUsingApiServer: !Equals
    - !FindInMap [Constants, Run, ApiServer]
    - Yes

# -----------------------------------------------------------------------------
# Resources
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resources-section-structure.html
# -----------------------------------------------------------------------------

Resources:
  # -- Ssm -----------------------------------------------------------------

  # https://docs.aws.amazon.com/AWSCloudFormation/latfest/UserGuide/aws-resource-ssm-parameter.html
  # AWS Console: https://console.aws.amazon.com/systems-manager/parameters > Search for {stack}

  SsmParameterSenzingEngineConfigurationJson:
    Properties:
      Name: !Sub "${AWS::StackName}-ssm-parameter-senzing-engine-configuration-json"
      Type: String
      Value: !GetAtt LambdaRunnerSenzingEngineConfigurationJson.ConfigJSON
    Type: AWS::SSM::Parameter

  # -- Iam -----------------------------------------------------------------

  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-role.html
  # AWS Console: https://console.aws.amazon.com/iam/home?#/roles > Search for {stack}

  IamRoleApiServer:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
                - sqs.amazonaws.com
        Version: "2012-10-17"
      Description: !Sub "${AWS::StackName}-iam-role-api-server"
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-iam-role-api-server"
    Type: AWS::IAM::Role

  IamRoleDebug:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
        Version: "2012-10-17"
      Description: !Sub "${AWS::StackName}-iam-role-debug"
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-iam-role-debug"
    Type: AWS::IAM::Role

  IamRoleInitPostgres:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
        Version: "2012-10-17"
      Description: !Sub "${AWS::StackName}-iam-role-init-postgres"
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-iam-role-init-postgres"
    Type: AWS::IAM::Role

  IamRoleLambda:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
                - lambda.amazonaws.com
                - route53.amazonaws.com
                - sqs.amazonaws.com
        Version: "2012-10-17"
      Description: !Sub "${AWS::StackName}-iam-role-lambda"
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-iam-role-lambda"
    Type: AWS::IAM::Role

  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-policy.html
  # AWS Console: https://console.aws.amazon.com/iam/home?#/roles > Search for {stack} > {role} > inline policy

  IamPolicyEc2:
    Properties:
      PolicyName: !Sub "${AWS::StackName}-iam-policy-ec2"
      PolicyDocument:
        Statement:
          - Action:
              - ec2:DescribeSubnets
            Effect: Allow
            Resource:
              - "*"
        Version: "2012-10-17"
      Roles:
        - !Ref IamRoleLambda
    Type: AWS::IAM::Policy

  IamPolicyLoggingCreateStream:
    Properties:
      PolicyName: !Sub "${AWS::StackName}-iam-policy-logging-create-stream"
      PolicyDocument:
        Statement:
          - Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource:
              - "*"
        Version: "2012-10-17"
      Roles:
        - !Ref IamRoleApiServer
        - !Ref IamRoleInitPostgres
        - !Ref IamRoleLambda
    Type: AWS::IAM::Policy

  IamPolicyPassRole:
    Properties:
      PolicyName: !Sub "${AWS::StackName}-iam-policy-pass-role"
      PolicyDocument:
        Statement:
          - Action:
              - iam:PassRole
            Effect: Allow
            Resource:
              - !GetAtt IamRoleLambda.Arn
              - !GetAtt IamRoleInitPostgres.Arn
        Version: "2012-10-17"
      Roles:
        - !Ref IamRoleLambda
        - !Ref IamRoleInitPostgres
    Type: AWS::IAM::Policy

  IamPolicySecretManager:
    Properties:
      PolicyName: !Sub "${AWS::StackName}-iam-policy-secret-manager"
      PolicyDocument:
        Statement:
          - Action:
              - secretsmanager:UpdateSecret
            Effect: Allow
            Resource:
              - !Ref SecretClientKeystore
        Version: "2012-10-17"
      Roles:
        - !Ref IamRoleApiServer
    Type: AWS::IAM::Policy

  IamPolicySqsProducer:
    Properties:
      PolicyName: !Sub "${AWS::StackName}-iam-policy-sqs-producer"
      PolicyDocument:
        Statement:
          - Action:
              - sqs:SendMessage
              - sqs:GetQueueAttributes
            Effect: Allow
            Resource:
              - !GetAtt SqsOutput.Arn
        Version: "2012-10-17"
      Roles:
        - !Ref IamRoleApiServer
    Type: AWS::IAM::Policy

  IamPolicyTaskRunner:
    Properties:
      PolicyName: !Sub "${AWS::StackName}-iam-policy-task-runner"
      PolicyDocument:
        Statement:
          - Action:
              - ecs:DescribeTasks
              - ecs:RunTask
            Effect: Allow
            Resource:
              - "*"
        Version: "2012-10-17"
      Roles:
        - !Ref IamRoleApiServer
        - !Ref IamRoleLambda
    Type: AWS::IAM::Policy

  # -- Logging ------------------------------------------------------------------

  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-logs-loggroup.html
  # AWS Console: https://console.aws.amazon.com/cloudwatch/home?#logsV2:log-groups > Search for {stack}

  LogsLogGroupLambdaRunTask:
    Properties:
      LogGroupName: !Sub "/aws/lambda/${AWS::StackName}-lambda-run-task"
    Type: AWS::Logs::LogGroup

  LogsLogGroupLambdaRunTaskAndWait:
    Properties:
      LogGroupName: !Sub "/aws/lambda/${AWS::StackName}-lambda-run-task-and-wait"
    Type: AWS::Logs::LogGroup

  LogsLogGroupLambdaSenzingEngineConfigurationJson:
    Properties:
      LogGroupName: !Sub "/aws/lambda/${AWS::StackName}-lambda-senzing-engine-configuration-json"
    Type: AWS::Logs::LogGroup

  LogsLogGroupLambdaStringToLower:
    Properties:
      LogGroupName: !Sub "/aws/lambda/${AWS::StackName}-lambda-string-to-lower"
    Type: AWS::Logs::LogGroup

  LogsLogGroupLambdaSubnets:
    Properties:
      LogGroupName: !Sub "/aws/lambda/${AWS::StackName}-lambda-subnets"
    Type: AWS::Logs::LogGroup

  LogsLogGroupMain:
    Properties:
      LogGroupName: !Sub
        - "/senzing/${StackName}/${AWS::StackName}"
        - StackName: !FindInMap [Constants, Stack, Name]
    Type: AWS::Logs::LogGroup

  # -- Cloud, subnets, routing --------------------------------------------------

  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-subnet.html
  # AWS Console: https://console.aws.amazon.com/vpc/home?#subnets > Search for {stack}

  Ec2SubnetPublic1:
    Properties:
      AvailabilityZone: !Select
        - "0"
        - !GetAZs
          Ref: AWS::Region
      CidrBlock: !Select
        - "0"
        - Fn::Split:
            - ", "
            - Fn::GetAtt: LambdaRunnerSubnets.Subnets
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ec2-subnet-public-1"
      VpcId:
        Fn::ImportValue:
          Fn::Sub: "${DatabaseStack}-ec2-VpcId"
    Type: AWS::EC2::Subnet

  Ec2SubnetPublic2:
    Properties:
      AvailabilityZone: !Select
        - "1"
        - !GetAZs
          Ref: AWS::Region
      CidrBlock: !Select
        - "1"
        - Fn::Split:
            - ", "
            - Fn::GetAtt: LambdaRunnerSubnets.Subnets
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ec2-subnet-public-2"
      VpcId:
        Fn::ImportValue:
          Fn::Sub: "${DatabaseStack}-ec2-VpcId"
    Type: AWS::EC2::Subnet

  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-eip.html
  # AWS Console: https://console.aws.amazon.com/vpc/home?#Addresses: > Search for {stack}

  Ec2Eip:
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ec2-eip"
    Type: AWS::EC2::EIP

  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-natgateway.html
  # AWS Console: https://console.aws.amazon.com/vpc/home?#NatGateways: > Search for {stack}

  Ec2NatGateway:
    Properties:
      AllocationId: !GetAtt Ec2Eip.AllocationId
      SubnetId: !Ref Ec2SubnetPublic1
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ec2-nat-gateway"
    Type: AWS::EC2::NatGateway

  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-security-group.html
  # AWS Console: https://console.aws.amazon.com/vpc/home?#SecurityGroups > Search for {stack}

  Ec2SecurityGroupLambdaRunner:
    Properties:
      GroupDescription: !Sub "${AWS::StackName} - Lambda open ports."
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: All
          IpProtocol: "-1"
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ec2-security-group-lambda-runner"
      VpcId:
        Fn::ImportValue:
          Fn::Sub: "${DatabaseStack}-ec2-VpcId"
    Type: AWS::EC2::SecurityGroup

  Ec2SecurityGroupLoadBalancerPublic:
    Properties:
      GroupDescription: !Sub "${AWS::StackName} - Public load balancer open ports."
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: All
          IpProtocol: "-1"
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ec2-security-group-alb-public"
      VpcId:
        Fn::ImportValue:
          Fn::Sub: "${DatabaseStack}-ec2-VpcId"
    Type: AWS::EC2::SecurityGroup

  Ec2SecurityGroupLoadBalancerPrivate:
    Properties:
      GroupDescription: !Sub "${AWS::StackName} - Private load balancer open ports."
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: All
          IpProtocol: "-1"
      SecurityGroupIngress:
        - CidrIp:
            Fn::ImportValue:
              Fn::Sub: "${DatabaseStack}-ec2-VpcId-cidrblock"
          Description: Senzing API server
          FromPort: 2443
          IpProtocol: tcp
          ToPort: 2443
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ec2-security-group-alb-private"
      VpcId:
        Fn::ImportValue:
          Fn::Sub: "${DatabaseStack}-ec2-VpcId"
    Type: AWS::EC2::SecurityGroup

  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-security-group-ingress.html
  # AWS Console: https://console.aws.amazon.com/vpc/home?#SecurityGroups: > Search for {stack}-ec2-security-group-alb-public > Inbound rules

  Ec2SecurityGroupIngressApiServerPublic:
    Condition: IfUsingApiServer
    Properties:
      Description: allow network ingress on container port 2443 from ALB
      FromPort: 2443
      GroupId: !GetAtt Ec2SecurityGroupLoadBalancerPublic.GroupId
      IpProtocol: tcp
      SourceSecurityGroupId: !GetAtt Ec2SecurityGroupLoadBalancerPublic.GroupId
      ToPort: 2443
    Type: AWS::EC2::SecurityGroupIngress

  Ec2SecurityGroupIngressApiServerPrivate:
    Condition: IfUsingApiServer
    Properties:
      CidrIp:
        Fn::ImportValue:
          Fn::Sub: "${DatabaseStack}-ec2-VpcId-cidrblock"
      Description: Senzing API server
      FromPort: 8250
      GroupId:
        Fn::ImportValue:
          Fn::Sub: "${DatabaseStack}-ec2-security-group-internal"
      IpProtocol: tcp
      ToPort: 8250
    Type: AWS::EC2::SecurityGroupIngress

  Ec2SecurityGroupIngressHttps:
    Properties:
      CidrIp: !Ref CidrInbound
      Description: HTTPS
      FromPort: 443
      GroupId: !GetAtt Ec2SecurityGroupLoadBalancerPublic.GroupId
      IpProtocol: tcp
      ToPort: 443
    Type: AWS::EC2::SecurityGroupIngress

  Ec2SecurityGroupIngressNFS:
    Properties:
      CidrIp:
        Fn::ImportValue:
          Fn::Sub: "${DatabaseStack}-ec2-VpcId-cidrblock"
      Description: NFS
      FromPort: 2049
      IpProtocol: tcp
      GroupId:
        Fn::ImportValue:
          Fn::Sub: "${DatabaseStack}-ec2-security-group-internal"
      ToPort: 2049
    Type: AWS::EC2::SecurityGroupIngress

  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-route-table.html
  # AWS Console: https://console.aws.amazon.com/vpc/home?#RouteTables > Search for {stack}

  Ec2RouteTablePrivate:
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ec2-route-table-private"
      VpcId:
        Fn::ImportValue:
          Fn::Sub: "${DatabaseStack}-ec2-VpcId"
    Type: AWS::EC2::RouteTable

  Ec2RouteTablePublic:
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ec2-route-table-public"
      VpcId:
        Fn::ImportValue:
          Fn::Sub: "${DatabaseStack}-ec2-VpcId"
    Type: AWS::EC2::RouteTable

  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-route.html
  # AWS Console: https://console.aws.amazon.com/vpc/home?#RouteTables > {name} > "Routes" tab

  Ec2RoutePrivate:
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref Ec2NatGateway
      RouteTableId: !Ref Ec2RouteTablePrivate
    Type: AWS::EC2::Route

  Ec2RoutePublic:
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Fn::ImportValue:
          Fn::Sub: "${DatabaseStack}-ec2-internet-gateway"
      RouteTableId: !Ref Ec2RouteTablePublic
    Type: AWS::EC2::Route

  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-subnet-route-table-assoc.html
  # AWS Console: https://console.aws.amazon.com/vpc/home?#RouteTables > {name} > "Subnet Associations" tab

  Ec2SubnetRouteTableAssociationPrivate1:
    Properties:
      RouteTableId: !Ref Ec2RouteTablePrivate
      SubnetId:
        Fn::ImportValue:
          Fn::Sub: "${DatabaseStack}-subnet-private-1"
    Type: AWS::EC2::SubnetRouteTableAssociation

  Ec2SubnetRouteTableAssociationPrivate2:
    Properties:
      RouteTableId: !Ref Ec2RouteTablePrivate
      SubnetId:
        Fn::ImportValue:
          Fn::Sub: "${DatabaseStack}-subnet-private-2"
    Type: AWS::EC2::SubnetRouteTableAssociation

  Ec2SubnetRouteTableAssociationPublic1:
    Properties:
      RouteTableId: !Ref Ec2RouteTablePublic
      SubnetId: !Ref Ec2SubnetPublic1
    Type: AWS::EC2::SubnetRouteTableAssociation

  Ec2SubnetRouteTableAssociationPublic2:
    Properties:
      RouteTableId: !Ref Ec2RouteTablePublic
      SubnetId: !Ref Ec2SubnetPublic2
    Type: AWS::EC2::SubnetRouteTableAssociation

  # -- Queue --------------------------------------------------------------------

  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sqs-queues.html
  # AWS Console: https://console.aws.amazon.com/sqs/v2/home > Search on {stack}

  SqsOutput:
    Properties:
      DelaySeconds: 0
      KmsMasterKeyId: alias/aws/sqs
      MaximumMessageSize: 262144
      MessageRetentionPeriod: 1209600
      QueueName: !Sub "${AWS::StackName}-sqs-output"
      ReceiveMessageWaitTimeSeconds: 0
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-sqs-output"
      VisibilityTimeout: 300
    Type: AWS::SQS::Queue

  # -- ECS Cluster --------------------------------------------------------------

  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-cluster.html
  # AWS Console: https://console.aws.amazon.com/ecs/home?#/clusters > Search for {stack}

  EcsCluster:
    Properties:
      ClusterName: !Sub "${AWS::StackName}-cluster"
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ecs-cluster"
    Type: AWS::ECS::Cluster

  # -- LambdaFunction -----------------------------------------------------------

  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lambda-function.html
  # AWS Console: https://console.aws.amazon.com/lambda/home?#/functions > Search for {stack}

  LambdaFunctionRunTask:
    DependsOn:
      - Ec2SubnetRouteTableAssociationPrivate1
      - Ec2SubnetRouteTableAssociationPrivate2
    Properties:
      Code:
        ZipFile: |
          #!/usr/bin/env python3

          import boto3
          import cfnresponse
          import datetime
          import json
          import logging
          import traceback
          from json import JSONEncoder

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          class DateTimeEncoder(JSONEncoder):
              def default(self, obj):
                  if isinstance(obj, (datetime.date, datetime.datetime)):
                      return obj.isoformat()

          def handler(event, context):
              result = cfnresponse.SUCCESS
              response = {}
              try:
                  logger.info("Event: {0}".format(json.dumps(event)))
                  if event['RequestType'] in ['Create', 'Update']:
                      properties = event.get('ResourceProperties', {})
                      run_task_parameters = properties.get('RunTaskParameters', {})

                      # Change strings to integers.

                      numbers = [
                          "count",
                      ]
                      for number in numbers:
                          if number in run_task_parameters:
                              run_task_parameters[number] = int(run_task_parameters[number])

                      # Make AWS ECS request.

                      ecs = boto3.client('ecs')
                      response = ecs.run_task(**run_task_parameters)

                  logger.info("Response: {0}".format(json.dumps(response, cls=DateTimeEncoder)))

              except Exception as e:
                  logger.error(e)
                  traceback.print_exc()
                  result = cfnresponse.FAILED
              finally:
                  cfnresponse.send(event, context, result, {})

      Description: Runs an ECS task.
      FunctionName: !Sub "${AWS::StackName}-lambda-run-task"
      Handler: index.handler
      Role: !GetAtt IamRoleLambda.Arn
      Runtime: python3.8
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-lambda-run-task"
      Timeout: 30
    Type: AWS::Lambda::Function

  LambdaFunctionRunTaskAndWait:
    DependsOn:
      - Ec2SubnetRouteTableAssociationPrivate1
      - Ec2SubnetRouteTableAssociationPrivate2
    Properties:
      Code:
        ZipFile: |
          #!/usr/bin/env python3

          import boto3
          import cfnresponse
          import datetime
          import json
          import logging
          import traceback
          from json import JSONEncoder

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          class DateTimeEncoder(JSONEncoder):
              def default(self, obj):
                  if isinstance(obj, (datetime.date, datetime.datetime)):
                      return obj.isoformat()

          def handler(event, context):
              result = cfnresponse.SUCCESS
              response = {}
              try:
                  logger.info("Event: {0}".format(json.dumps(event)))
                  if event['RequestType'] in ['Create', 'Update']:
                      properties = event.get('ResourceProperties', {})
                      run_task_parameters = properties.get('RunTaskParameters', {})

                      # Change strings to integers.

                      numbers = [
                          "count",
                      ]
                      for number in numbers:
                          if number in run_task_parameters:
                              run_task_parameters[number] = int(run_task_parameters[number])

                      # Make AWS ECS request.
                      # https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/ecs.html#ECS.Client.run_task

                      ecs = boto3.client('ecs')
                      response = ecs.run_task(**run_task_parameters)

                      # Wait for completion.
                      # https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/ecs.html#waiters

                      task_list = response.get('tasks', [])
                      if len(task_list) > 0:
                          taskArn = task_list[0].get('taskArn', None)
                          cluster = properties.get('ClusterId', None)

                          if not [x for x in (taskArn, cluster) if x is None]:
                              waiter = ecs.get_waiter('tasks_stopped')
                              waiter.wait(
                                  cluster=cluster,
                                  tasks=[taskArn],
                              )

                              response['describe_task'] = ecs.describe_tasks(
                                  cluster=cluster,
                                  tasks=[taskArn],
                              )
                              logger.info("describe_task response: {0}".format(json.dumps(response.get('describe_task', {}), cls=DateTimeEncoder)))

                      # test for failures and log any
                      fail_list = response.get('failures', [])
                      if len(fail_list) > 0:
                          for item in fail_list:
                              logger.info(f"Task failed to run.  ARN: {item.get('arn', 'unknown')}")
                              logger.info(f"  Reason: {item.get('reason', 'unknown')}")
                              logger.info(f"  Details: {item.get('detail','none')}")

                      exit_code = response.get('describe_task', {}).get('tasks', [{}])[0].get('containers', [{}])[0].get('exitCode', 99)
                      if exit_code != 0:
                          result = cfnresponse.FAILED
                  logger.info("Response: {0}".format(json.dumps(response, cls=DateTimeEncoder)))

              except Exception as e:
                  logger.error(e)
                  traceback.print_exc()
                  result = cfnresponse.FAILED
              finally:
                  cfnresponse.send(event, context, result, {})

      Description: Runs an ECS task and waits until completion.
      FunctionName: !Sub "${AWS::StackName}-lambda-run-task-and-wait"
      Handler: index.handler
      Role: !GetAtt IamRoleLambda.Arn
      Runtime: python3.8
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-lambda-run-task-and-wait"
      Timeout: 600
    Type: AWS::Lambda::Function

  LambdaFunctionSenzingEngineConfigurationJson:
    Properties:
      Code:
        ZipFile: |
          #!/usr/bin/env python3

          import cfnresponse
          import json
          import logging
          import traceback

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          def handler(event, context):
              result = cfnresponse.SUCCESS
              response_data = {}
              try:
                  logger.info("Event: {0}".format(json.dumps(event)))
                  if event['RequestType'] in ['Create', 'Update']:
                      properties = event.get('ResourceProperties', {})
                      database_name = properties.get('DatabaseName', '')
                      database_user_name = properties.get('DatabaseUsername', '')
                      database_password = properties.get('DatabasePassword', '')
                      database_host_core = properties.get('DatabaseHostCore', '')
                      database_port_core = properties.get('DatabasePortCore', '')
                      database_host_res = properties.get('DatabaseHostRes', '')
                      database_port_res = properties.get('DatabasePortRes', '')
                      database_host_libfeat = properties.get('DatabaseHostLibfeat', '')
                      database_port_libfeat = properties.get('DatabasePortLibfeat', '')
                      db_config = 'Multiple'
                      if database_host_core == database_host_res == database_host_libfeat:
                          db_config = 'Single'
                      logger.info(f"db_config={db_config}")
                      license_string = properties.get('SenzingLicenseAsBase64', '')
                      if db_config == 'Single':
                          response_data["ConfigJSON"] = (
                                '{'
                                '    "PIPELINE": {'
                                '        "CONFIGPATH": "/etc/opt/senzing",'
                                f'        "LICENSESTRINGBASE64": "{license_string}",'
                                '        "RESOURCEPATH": "/opt/senzing/g2/resources",'
                                '        "SUPPORTPATH": "/opt/senzing/data"'
                                '    },'
                                '    "SQL": {'
                                '        "BACKEND": "SQL",'
                                f'        "CONNECTION":"postgresql://{database_user_name}:{database_password}@{database_host_core}:{database_port_core}:{database_name}"'
                                '    }'
                                '}')
                      else:
                          response_data["ConfigJSON"] = (
                                '{'
                                '    "PIPELINE": {'
                                '        "CONFIGPATH": "/etc/opt/senzing",'
                                f'        "LICENSESTRINGBASE64": "{license_string}",'
                                '        "RESOURCEPATH": "/opt/senzing/g2/resources",'
                                '        "SUPPORTPATH": "/opt/senzing/data"'
                                '    },'
                                '    "SQL": {'
                                '        "BACKEND": "HYBRID",'
                                f'        "CONNECTION":"postgresql://{database_user_name}:{database_password}@{database_host_core}:{database_port_core}:{database_name}"'
                                '    },'
                                '    "C1": {'
                                '        "CLUSTER_SIZE": "1",'
                                f'        "DB_1": "postgresql://{database_user_name}:{database_password}@{database_host_res}:{database_port_res}:{database_name}"'
                                '    },'
                                '    "C2": {'
                                '        "CLUSTER_SIZE": "1",'
                                f'        "DB_1": "postgresql://{database_user_name}:{database_password}@{database_host_libfeat}:{database_port_libfeat}:{database_name}"'
                                '    },'
                                '    "HYBRID": {'
                                '        "LIB_FEAT": "C2",'
                                '        "LIB_FEAT_HKEY": "C2",'
                                '        "RES_FEAT": "C1",'
                                '        "RES_FEAT_EKEY": "C1",'
                                '        "RES_FEAT_LKEY": "C1",'
                                '        "RES_FEAT_STAT": "C1"'
                                '    }'
                                '}')
              except Exception as e:
                  logger.error(e)
                  traceback.print_exc()
                  result = cfnresponse.FAILED
              finally:
                  cfnresponse.send(event, context, result, response_data)

      Description: Constructs the Senzing Engine configuration JSON.
      FunctionName: !Sub "${AWS::StackName}-lambda-senzing-engine-configuration-json"
      Handler: index.handler
      Role: !GetAtt IamRoleLambda.Arn
      Runtime: python3.8
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-lambda-senzing-engine-configuration-json"
    Type: AWS::Lambda::Function

  LambdaFunctionStringToLower:
    Properties:
      Code:
        ZipFile: |
          #!/usr/bin/env python3

          import cfnresponse
          import json
          import logging
          import traceback

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          def handler(event, context):
              result = cfnresponse.SUCCESS
              response_data = {}
              try:
                  logger.info("Event: {0}".format(json.dumps(event)))
                  if event['RequestType'] in ['Create', 'Update']:
                      properties = event.get('ResourceProperties', {})
                      input_string = properties.get('InputString', '')
                      response_data["OutputString"] = input_string.lower()
              except Exception as e:
                  logger.error(e)
                  traceback.print_exc()
                  result = cfnresponse.FAILED
              finally:
                  cfnresponse.send(event, context, result, response_data)

      Description: Performs string.lower()
      FunctionName: !Sub "${AWS::StackName}-lambda-string-to-lower"
      Handler: index.handler
      Role: !GetAtt IamRoleLambda.Arn
      Runtime: python3.8
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-lambda-string-to-lower"
    Type: AWS::Lambda::Function

  LambdaFunctionSubnets:
    Properties:
      Code:
        ZipFile: |
          #!/usr/bin/env python3

          import boto3
          import cfnresponse
          import json
          import logging
          import traceback

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)


          def as_cidr(cidr_decimal, cidr_prefix):
              octals = '.'.join([str(cidr_decimal >> (i << 3) & 0xFF) for i in range(4)[::-1]])
              return "{0}/{1}".format(octals, cidr_prefix)


          def find_cidr_decimal(cidr):
              (octets, prefix) = cidr.split('/')
              octet = octets.split(".")
              return int(octet[0]) << 24 | int(octet[1]) << 16 | int(octet[2]) << 8 | int(octet[3])


          def find_cidr_prefix(cidr):
              (octets, prefix) = cidr.split('/')
              return int(prefix)


          def highest_cidr(cidrs):
              result = "0.0.0.0/0"
              result_decimal = find_cidr_decimal(result)
              for cidr in cidrs:
                  cidr_decimal = find_cidr_decimal(cidr)
                  if cidr_decimal > result_decimal:
                      result = cidr
                      result_decimal = find_cidr_decimal(result)
              return result


          def adjust_cidr(cidr, next_cidr_prefix=None):
              last_cidr_decimal = find_cidr_decimal(cidr)
              last_cidr_prefix = find_cidr_prefix(cidr)
              stride = 2 << (31 - last_cidr_prefix)
              mask = 0xffffffff - (stride - 1)
              next_cidr_decimal = last_cidr_decimal & mask
              next_cidr_decimal = next_cidr_decimal + stride - 1
              return as_cidr(next_cidr_decimal, next_cidr_prefix)


          def next_cidr(cidr):
              last_cidr_decimal = find_cidr_decimal(cidr)
              last_cidr_prefix = find_cidr_prefix(cidr)
              stride = 2 << (31 - last_cidr_prefix)
              mask = 0xffffffff - (stride - 1)
              next_cidr_decimal = (last_cidr_decimal + stride) & mask
              return as_cidr(next_cidr_decimal, last_cidr_prefix)


          def handler(event, context):
              result = cfnresponse.SUCCESS
              response_data = {}
              try:
                  logger.info("Event: {0}".format(json.dumps(event)))
                  if event['RequestType'] in ['Create', 'Update']:
                      properties = event.get('ResourceProperties', {})
                      vpc_id = properties.get('VpcId')
                      number_of_subnets = int(properties.get('NumberOfSubnets', 1))
                      cidr_prefix = int(properties.get('CidrPrefix', 24))

                      ec2_client = boto3.client('ec2')

                      filters = [
                          {
                              "Name": "vpc-id",
                              "Values": [
                                  vpc_id
                              ]
                          }
                      ]

                      describe_subnets = ec2_client.describe_subnets(Filters=filters)
                      subnets = describe_subnets.get("Subnets")
                      cidr = highest_cidr(p["CidrBlock"] for p in subnets)
                      cidr = adjust_cidr(cidr, cidr_prefix)

                      result_subnets = []
                      for x in range(number_of_subnets):
                          cidr = next_cidr(cidr)
                          result_subnets.append(cidr)
                      response_data["Subnets"] = ", ".join(result_subnets)
              except Exception as e:
                  logger.error(e)
                  traceback.print_exc()
                  result = cfnresponse.FAILED
              finally:
                  cfnresponse.send(event, context, result, response_data)

      Description: Find available Subnets.
      FunctionName: !Sub "${AWS::StackName}-lambda-subnets"
      Handler: index.handler
      Role: !GetAtt IamRoleLambda.Arn
      Runtime: python3.8
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-lambda-subnets"
      Timeout: 600
    Type: AWS::Lambda::Function

  # -- Run Lambda jobs ----------------------------------------------------------

  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-custom-resources.html
  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cfn-customresource.html
  # AWS Console: FIXME:  none?

  LambdaRunnerSenzingEngineConfigurationJson:
    Properties:
      DatabaseHostCore:
        Fn::ImportValue:
          Fn::Sub: "${DatabaseStack}-database-host-core"
      DatabaseHostLibfeat:
        Fn::ImportValue:
          Fn::Sub: "${DatabaseStack}-database-host-libfeat"
      DatabaseHostRes:
        Fn::ImportValue:
          Fn::Sub: "${DatabaseStack}-database-host-res"
      DatabaseName:
        Fn::ImportValue:
          Fn::Sub: "${DatabaseStack}-database-name"
      DatabasePassword:
        Fn::ImportValue:
          Fn::Sub: "${DatabaseStack}-database-password"
      DatabasePortCore:
        Fn::ImportValue:
          Fn::Sub: "${DatabaseStack}-database-port-core"
      DatabasePortLibfeat:
        Fn::ImportValue:
          Fn::Sub: "${DatabaseStack}-database-port-libfeat"
      DatabasePortRes:
        Fn::ImportValue:
          Fn::Sub: "${DatabaseStack}-database-port-res"
      DatabaseUsername:
        Fn::ImportValue:
          Fn::Sub: "${DatabaseStack}-database-username"
      SenzingLicenseAsBase64: !Ref SenzingLicenseAsBase64
      ServiceToken: !GetAtt LambdaFunctionSenzingEngineConfigurationJson.Arn
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-lambda-runner-senzing-engine-configuration-json"
    Type: Custom::LambdaRunnerSenzingEngineConfigurationJson

  LambdaRunnerStackNameAsLower:
    Properties:
      InputString: !Sub "${AWS::StackName}"
      ServiceToken: !GetAtt LambdaFunctionStringToLower.Arn
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-lambda-runner-stack-name-as-lower"
    Type: Custom::LambdaRunnerStackNameAsLower

  LambdaRunnerSubnets:
    Properties:
      CidrPrefix: 24
      NumberOfSubnets: 2
      ServiceToken: !GetAtt LambdaFunctionSubnets.Arn
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-lambda-runner-subnets"
      VpcId:
        Fn::ImportValue: !Sub "${DatabaseStack}-ec2-VpcId"
    Type: Custom::LambdaRunnerSubnets

  # -- Secrets Manager ----------------------------------------------------------

  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-secretsmanager-secret.html
  # AWS Console: https://console.aws.amazon.com/secretsmanager/home

  SecretServerKeystorePassword:
    Properties:
      Description: Senzing API Server Keystore password
      GenerateSecretString:
        PasswordLength: 10
        ExcludePunctuation: true
      Name: !Sub "${AWS::StackName}-server-keystore-password"
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-server-keystore-password"
    Type: "AWS::SecretsManager::Secret"

  SecretClientKeystorePassword:
    Properties:
      Description: Senzing API Client Keystore password
      GenerateSecretString:
        PasswordLength: 10
        ExcludePunctuation: true
      Name: !Sub "${AWS::StackName}-client-keystore-password"
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-client-keystore-password"
    Type: "AWS::SecretsManager::Secret"

  SecretClientKeystore:
    Properties:
      Description: Senzing API Client Keystore
      GenerateSecretString:
        PasswordLength: 10
        ExcludePunctuation: true
      Name: !Sub "${AWS::StackName}-client-keystore"
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-client-keystore"
    Type: "AWS::SecretsManager::Secret"

  # -- Load balancing -----------------------------------------------------------

  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticloadbalancingv2-loadbalancer.html
  # AWS Console: https://console.aws.amazon.com/ec2/v2/home?#LoadBalancers: > Search for {stack}

  NetworkLoadBalancerPublic:
    Condition: IfUsingApiServer
    Properties:
      Name: !Sub
        - "${StackNameAsLower}-nlb-public"
        - StackNameAsLower: !GetAtt LambdaRunnerStackNameAsLower.OutputString
      Scheme: internet-facing
      Subnets:
        - !Ref Ec2SubnetPublic1
        - !Ref Ec2SubnetPublic2
      Tags:
        - Key: Name
          Value: !Sub
            - "${StackNameAsLower}-nlb-public"
            - StackNameAsLower: !GetAtt LambdaRunnerStackNameAsLower.OutputString
      Type: network
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer

  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticloadbalancingv2-targetgroup.html
  # AWS Console: https://console.aws.amazon.com/ec2/v2/home?#TargetGroups: > Search for {stack}

  TargetGroupApiServerPublic:
    Condition: IfUsingApiServer
    DependsOn:
      - NetworkLoadBalancerPublic
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthyThresholdCount: 2
      Name: !Sub "${AWS::StackName}-tg-api-public"
      Port: 2443
      Protocol: TCP
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-target-group-api-server-public"
      TargetType: ip
      UnhealthyThresholdCount: 2
      VpcId:
        Fn::ImportValue:
          Fn::Sub: "${DatabaseStack}-ec2-VpcId"
    Type: AWS::ElasticLoadBalancingV2::TargetGroup

  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticloadbalancingv2-listener.html
  # AWS Console: https://console.aws.amazon.com/ec2/v2/home?#LoadBalancers: > {name} > "Listeners" tab

  TcpListenerPort443:
    Condition: IfUsingApiServer
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroupApiServerPublic
      LoadBalancerArn: !Ref NetworkLoadBalancerPublic
      Port: 443
      Protocol: TCP
    Type: AWS::ElasticLoadBalancingV2::Listener

  # -- EcsTaskDefinition --------------------------------------------------------

  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-taskdefinition.html
  # AWS Console: https://console.aws.amazon.com/ecs/home?#/taskDefinitions > Search for {stack}

  # create a sidecar container that generates the keystore in a volume that is shared by both containers
  # https://kichik.com/2020/09/10/mounting-configuration-files-in-fargate/
  EcsTaskDefinitionApiServer:
    Condition: IfUsingApiServer
    DependsOn:
      - SecretClientKeystore
      - SecretClientKeystorePassword
      - SecretServerKeystorePassword
    Properties:
      ContainerDefinitions:
        - Environment:
            - Name: SENZING_API_SERVER_ALLOWED_ORIGINS
              Value: "*"
            - Name: SENZING_API_SERVER_BIND_ADDR
              Value: all
            - Name: SENZING_API_SERVER_ENABLE_ADMIN
              Value: "true"
            - Name: SENZING_API_SERVER_INIT_JSON
              Value: !GetAtt SsmParameterSenzingEngineConfigurationJson.Value
            - Name: SENZING_API_SERVER_SECURE_PORT
              Value: "2443"
            - Name: SENZING_API_SERVER_SKIP_ENGINE_PRIMING
              Value: "true"
            - Name: SENZING_API_SERVER_SKIP_STARTUP_PERF
              Value: "true"
            - Name: SENZING_API_SERVER_URL_BASE_PATH
              Value: /api
            - Name: SENZING_API_SERVER_DEBUG
              Value: "false"
            - Name: SENZING_API_SERVER_VERBOSE
              Value: "true"
            - Name: SENZING_ENGINE_CONFIGURATION_JSON
              Value: !GetAtt SsmParameterSenzingEngineConfigurationJson.Value
            - Name: SENZING_SQS_INFO_QUEUE_URL
              Value: !Ref SqsOutput
            - Name: SENZING_API_SERVER_KEY_STORE
              Value: "/tmp/sz-api-server-store.p12"
            - Name: SENZING_API_SERVER_KEY_STORE_PASSWORD
              Value: !Sub "{{resolve:secretsmanager:${AWS::StackName}-server-keystore-password}}"
            - Name: SENZING_API_SERVER_CLIENT_KEY_STORE
              Value: "/tmp/my-client-trust-store.p12"
            - Name: SENZING_API_SERVER_CLIENT_KEY_STORE_PASSWORD
              Value: !Sub "{{resolve:secretsmanager:${AWS::StackName}-client-keystore-password}}"
          Essential: true
          DependsOn:
            - Condition: COMPLETE
              ContainerName: generate-keystore
          Image: !FindInMap [SenzingVersionMap, !Ref SenzingVersion, ApiServer]
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogsLogGroupMain
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: service
          MountPoints:
            - ContainerPath: /tmp
              SourceVolume: keystore-vol
          Name: api-server
          PortMappings:
            - ContainerPort: 2443
              HostPort: 2443
              Protocol: tcp
          Privileged: false
          ReadonlyRootFilesystem: false
        - Environment:
            - Name: SENZING_API_SERVER_KEYSTORE_PASSWORD
              Value: !Sub "{{resolve:secretsmanager:${AWS::StackName}-server-keystore-password:SecretString}}"
            - Name: SENZING_API_CLIENT_KEYSTORE_PASSWORD
              Value: !Sub "{{resolve:secretsmanager:${AWS::StackName}-client-keystore-password:SecretString}}"
            - Name: SENZING_API_CLIENT_KEYSTORE_SECRET
              Value: !Ref SecretClientKeystore
            - Name: SENZING_ETC_DIR
              Value: "/tmp"
            - Name: SENZING_SUBCOMMAND
              Value: "aws"
            - Name: AWS_REGION
              Value: !Ref AWS::Region
          Essential: false
          Image:
            !FindInMap [
              SenzingVersionMap,
              !Ref SenzingVersion,
              KeystoreGenerator,
            ]
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogsLogGroupMain
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: job
          MountPoints:
            - ContainerPath: /tmp
              ReadOnly: false
              SourceVolume: keystore-vol
          Name: generate-keystore
          Privileged: false
          ReadonlyRootFilesystem: false
          User: "0"
      Cpu: "2048"
      ExecutionRoleArn: !GetAtt IamRoleApiServer.Arn
      Family: !Sub "${AWS::StackName}-task-definition-api-server"
      Memory: "16384"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ecs-task-definition-api-server"
      TaskRoleArn: !GetAtt IamRoleApiServer.Arn
      Volumes:
        - Name: keystore-vol
          Host: {}
    Type: AWS::ECS::TaskDefinition

  # -- EcsService ---------------------------------------------------------------

  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-service.html
  # AWS Console: https://console.aws.amazon.com/ecs/home?#/clusters > {stack}-cluster > "Services" tab

  EcsServiceApiServer:
    Condition: IfUsingApiServer
    DependsOn:
      - TargetGroupApiServerPublic
      - NetworkLoadBalancerPublic
    Properties:
      Cluster: !Ref EcsCluster
      DesiredCount: 1
      EnableECSManagedTags: true
      LaunchType: FARGATE
      LoadBalancers:
        - ContainerPort: 2443
          ContainerName: api-server
          TargetGroupArn: !Ref TargetGroupApiServerPublic
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - !Ref Ec2SecurityGroupLoadBalancerPrivate
            - !Ref Ec2SecurityGroupLoadBalancerPublic
          Subnets:
            - Fn::ImportValue:
                Fn::Sub: "${DatabaseStack}-subnet-private-1"
            - Fn::ImportValue:
                Fn::Sub: "${DatabaseStack}-subnet-private-2"
      PlatformVersion: 1.4.0
      PropagateTags: TASK_DEFINITION
      ServiceName: api-server
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ecs-service-api-server"
      TaskDefinition: !Ref EcsTaskDefinitionApiServer
    Type: AWS::ECS::Service

  # -- AutoScaling --------------------------------------------------------------

  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-applicationautoscaling-scalabletarget.html
  # AWS Console: https://console.aws.amazon.com/ecs/home?#/clusters > {stack}-cluster > {Service Name} > "Auto Scaling" tab

  ApplicationAutoScalingScalableTargetApiServer:
    Condition: IfUsingApiServer
    Properties:
      MaxCapacity: 200
      MinCapacity: 1
      ResourceId: !Sub "service/${EcsCluster}/${EcsServiceApiServer.Name}"
      RoleARN: !Sub "arn:aws:iam::${AWS::AccountId}:role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService"
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      SuspendedState:
        DynamicScalingInSuspended: false
        DynamicScalingOutSuspended: false
        ScheduledScalingSuspended: false
    Type: AWS::ApplicationAutoScaling::ScalableTarget

  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-applicationautoscaling-scalingpolicy.html
  # AWS Console: https://console.aws.amazon.com/ecs/home?#/clusters > {stack}-cluster > {Service Name} > "Auto Scaling" tab

  ApplicationAutoScalingScalingPolicyApiServer:
    Condition: IfUsingApiServer
    Properties:
      PolicyName: !Sub "${AWS::StackName}-scaling-policy-api-server"
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref ApplicationAutoScalingScalableTargetApiServer
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        ScaleInCooldown: 1200
        ScaleOutCooldown: 300
        TargetValue: 30
    Type: AWS::ApplicationAutoScaling::ScalingPolicy

# -----------------------------------------------------------------------------
# Outputs
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/outputs-section-structure.html
# -----------------------------------------------------------------------------

Outputs:
  # AWS Console: https://console.aws.amazon.com/cloudformation/home?#/stacks > {stack} > Outputs

  AccountID:
    Description: "The accountID Help: https://hub.senzing.com/aws-cloudformation-dev-rest/details#accountid"
    Export:
      Name: !Sub "${AWS::StackName}-account-id"
    Value: !Sub "${AWS::AccountId}"

  ImageVersions:
    Description: "List of Docker images used in this stack."
    Export:
      Name: !Sub "${AWS::StackName}-image-versions"
    Value: !Join
      - ""
      - - "ApiServer:"
        - !FindInMap [SenzingVersionMap, !Ref SenzingVersion, ApiServer]
        - "KeystoreGenerator:"
        - !FindInMap [SenzingVersionMap, !Ref SenzingVersion, KeystoreGenerator]

  QueueOutput:
    Description: "URL of the queue with info records. Help: https://hub.senzing.com/aws-cloudformation-dev-rest/details#queueoutput"
    Export:
      Name: !Sub "${AWS::StackName}-sqs-output"
    Value: !Ref SqsOutput

  SecretServerKeystorePasswordOutput:
    Description: "Server keystore password's secret name"
    Export:
      Name: !Sub "${AWS::StackName}-server-keystore-password"
    Value: !Sub "${AWS::StackName}-server-keystore-password"

  SecretClientKeystorePasswordOutput:
    Description: "Client keystore password's secret name"
    Export:
      Name: !Sub "${AWS::StackName}-client-keystore-password"
    Value: !Sub "${AWS::StackName}-client-keystore-password"

  SecretClientKeystoreBase64Output:
    Description: "Base64 client keystore's secret name"
    Export:
      Name: !Sub "${AWS::StackName}-client-keystore"
    Value: !Sub "${AWS::StackName}-client-keystore"

  SubnetPublic1:
    Description: "The ID of public subnet 1. Help: https://hub.senzing.com/aws-cloudformation-dev-rest/details#subnetpublic1"
    Export:
      Name: !Sub "${AWS::StackName}-subnet-public-1"
    Value: !Ref Ec2SubnetPublic1

  SubnetPublic2:
    Description: "The ID of public subnet 2. Help: https://hub.senzing.com/aws-cloudformation-dev-rest/details#subnetpublic2"
    Export:
      Name: !Sub "${AWS::StackName}-subnet-public-2"
    Value: !Ref Ec2SubnetPublic2

  UrlApiServer:
    Condition: IfUsingApiServer
    Description: "URL for API Server. Help: https://hub.senzing.com/aws-cloudformation-dev-rest/details#urlapiserver"
    Export:
      Name: !Sub "${AWS::StackName}-url-api-server"
    Value: !Sub "https://${NetworkLoadBalancerPublic.DNSName}/api"

  UrlApiServerHeartbeat:
    Condition: IfUsingApiServer
    Description: "URL for API Server's heartbeat. Help: https://hub.senzing.com/aws-cloudformation-dev-rest/details#urlapiserverheartbeat"
    Export:
      Name: !Sub "${AWS::StackName}-url-api-server-heartbeat"
    Value: !Sub "https://${NetworkLoadBalancerPublic.DNSName}/api/heartbeat"
